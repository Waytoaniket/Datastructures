#include<stdio.h>
#include <stdlib.h>
struct node{
    struct node*prev;
    int data;
    struct node*next;
 }*start=NULL,*p,*q,*t;

void insert_beg(){
    int no;
    printf("Enter no\n");
    scanf("%d",&no);
    t=(struct node*)malloc(sizeof(struct node));
    t->data=no;
    if(start==NULL){
        t->next=NULL;
        t->prev=NULL;
        start=t;
    }
    else{
        t->next=start;
        t->prev=NULL;
        start->prev=t;
        start=t;
    }
}
void insert_end(){
    int no;
    printf("Enter no\n");
    scanf("%d",&no);
    t=(struct node*)malloc(sizeof(struct node));
    t->data=no;
    t->next=NULL;
    if(start==NULL){
        t->prev=NULL;
        start=t;
    }
    else{
        p=start;
        while(p->next!=NULL){
            p=p->next;
        }
        t->prev=p;
        p->next=t;
    }
}
 void insert_pos(){
    int no=0,n=0,flag=0;
    if(start==NULL)
    {
        printf("List is empty!!\n");

    }
    else{
    printf("Enter no\n");
    scanf("%d",&no);
    printf("Enter position\n");
    scanf("%d",&n);
    t=(struct node*)malloc(sizeof(struct node));
    t->data=no;
    p=start;
    for(int i=0;i<n-2;i++){
        if(p->next==NULL)
        {
        printf("There are less elements!!\n");
        flag=1;
        break;
        }
        p=p->next;
    }
    if(flag==0)
    {
        t->prev=p;
        t->next=p->next;
        p->next->prev=t;
        p->next=t;
    }
    }
}

void delete_beg(){
    if(start==NULL){
        printf("Linked list is empty\n");
    }
    else{
        p=start;
        start=p->next;
        p->next->prev=NULL;
        free(p);
    }
}

void delete_end(){
    if(start==NULL){
        printf("Linked list is empty\n");
    }
    else{
        p=start;
        while(p->next->next!=NULL){
            p=p->next;
        }
        q=p->next;
        p->next=NULL;
        free(q);
    }
}

void delete_pos(){
    int n=0,flag=0;
    if(start==NULL){
        printf("Linked list is empty\n");
    }
    else{
        printf("Enter position\n");
        scanf("%d",&n);
        p=start;
        for(int i=0;i<n-2;i++){
            if(p->next==NULL)
            {
            printf("There are less elements!!\n");
            flag=1;
            break;
        }
        p=p->next;
    }
     if(flag==0)
    {
        q=p->next;
     p->next=q->next;
     q->next->prev=p;
        free(q);
    }
    }
}

void display()
{
    if(start==NULL)
    {
        printf("List is empty!!\n");
    }
    else
    {
        q=start;
        printf("The linked list is:\n");
        while(q!=NULL)
        {
            printf("%d->",q->data);
            q=q->next;
        }
    }
}

void count()
{
    if(start==NULL)
    {
        printf("The length of the  Linked List is:0\n");
    }
    else{
    p=start;
    int len=1;
    while(p->next!=NULL)
    {
        p=p->next;
        len++;
    }
    printf("The length of the  Linked List is:%d\n",len);
    }
}

void reverse()
{
    if(start==NULL)
    {
        printf("List is empty!!\n");
    }
    else
    {
        q=start;
        printf("The linked list is:\n");
        while(q->next!=NULL)
        {
            q=q->next;
        }
         while(q!=NULL)
        {
           printf("%d->",q->data);
            q=q->prev;
        }
    }
}

int main()
{
    int ch;
    while(1)
    {
        printf("\n\n---- Doubly Linked List(DLL) Menu ----\n");
        printf("\n1.Insert\n2.Display\n3.Delete\n4.Count\n5.Reverse\n6.Exit\n\n");
        printf("Enter your choice(1-4):");
        scanf("%d",&ch);

        switch(ch)
        {
            case 1:
                    printf("\n---- Insert Menu ----");
                    printf("\n1.Insert at beginning\n2.Insert at end\n3.Insert at specified position\n4.Exit");
                    printf("\nEnter your choice(1-4):");
                    scanf("%d",&ch);

                    switch(ch)
                    {
                        case 1: insert_beg();
                                break;
                        case 2: insert_end();
                                break;
                        case 3: insert_pos();
                                break;
                        case 4: exit(0);
                        default: printf("\nWrong Choice!!");
                    }
                    break;

            case 2: display();
                    break;

            case 3: printf("\n---- Delete Menu ----");
                    printf("\n1.Delete from beginning\n2.Delete from end\n3.Delete from specified position\n4.Exit");
                    printf("\nEnter your choice(1-4):");
                    scanf("%d",&ch);

                    switch(ch)
                    {
                        case 1: delete_beg();
                                break;
                        case 2: delete_end();
                                break;
                        case 3: delete_pos();
                                break;
                        case 4: exit(0);
                        default: printf("Wrong Choice!!");
                    }
                    break;
            case 4:count();
                    break;
            case 5:reverse(start);
                    break;
            case 6: exit(0);
                    default: printf("Wrong Choice!!");
        }
    }
    return 0;
}


